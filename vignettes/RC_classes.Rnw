\documentclass[11pt]{article}

\usepackage{geometry}
 \geometry{
 a4paper,
 total={210mm,297mm},
 left=20mm,
 right=20mm,
 top=20mm,
 bottom=20mm,
 }
\usepackage{Sweave}
\usepackage{url}
\usepackage{rotating}
\usepackage{natbib}
\usepackage{placeins}
\usepackage{longtable}
\usepackage[latin1]{inputenc}
\usepackage{multirow}
\usepackage{hyperref}
%\usepackage{showframe}
\usepackage{pdflscape}
%\usepackage{pbox}
\usepackage{multicol}

%\VignetteIndexEntry{The reference classes in RCSpin} \\

%\sloppy
%\SweaveOpts{echo=FALSE,prefix.string=script18/plot}
\renewcommand{\textfraction}{0.0}

\let\oldmarginpar\marginpar
\renewcommand\marginpar[1]{\-\oldmarginpar[\raggedleft\footnotesize #1]%
{\raggedright\footnotesize #1}}

\title{Introduction to RCSpin}
\author{Rob Dunne}
\date{\today}


\begin{document}
%\setkeys{Gin}{width=8cm}
\setkeys{Gin}{width=0.9\columnwidth}
\maketitle
\tableofcontents

\section{RC Classes}

RCSpin implements the CRC-SPIN model \cite[]{Rutter.2008,Rutter.and.Savarino.2010}
       using the Reference Classes object oriented system of R.  R how has 3 object systems, 
S3, S4, and Reference Classes (RC) systems.

RC is good for simulations with complex states.
It has mutable objects -- i.e changes don't make copies.
\marginpar{the class names are pointers, I think. Why is this a good idea? I don't know}




<<eval=FALSE,echo=FALSE,results=hide>>=
# create a generic method called "testFun" that
# dispatches on the type of object it's applied to
setGeneric("testFun", function(x)standardGeneric("testFun"))
setMethod("testFun", "numeric", function(x){x+1})
testFun(5)
#6
hasMethod("testFun", "numeric") #[1] TRUE
existsMethod("testFun", "numeric") # [1] TRUE
hasMethod("testFun", "integer") # TRUE

existsMethod("testFun", "integer") # [1] FALSE
hasMethod("testFun") # default method  FALSE
hasMethod("testFun", "ANY") #FALSE

@

We intr


%http://www.inside-r.org/r-doc/methods/ReferenceClasses

Fields may be modified in a method by using the non-local assignment operator, <<-, 
as in the $edit and $undo methods in the example below. Note that non-local assignment 
is required: a local assignment with the <- operator just creates a local object in the 
function call, as it would in any R function. When methods are installed, a heuristic 
check is made for local assignments to field names and a warning issued if any are detected.

The operators <<- and ->> are normally only used in functions, and cause a search to made 
through parent environments for an existing definition of the variable being assigned. If 
such a variable is found (and its binding is not locked) then its value is redefined, otherwise 
assignment takes place in the global environment.

so where is " edits <<- c(edits, list(backup))" being assigned?




<<echo=FALSE,eval=FALSE>>=

# Person class

Person <- setRefClass( "Person",
    fields = list(
        age="numeric",
        sex="character",
        state="character", #"deceased","living", etc (as needed by subclasses)
        in_treatment_program="character",
        study_id="numeric",
        random_seed_state="integer"
    ),
    methods = list(
        initialize = function(study_id=0,
                            base_seed=NA,
                            age=1,
                            sex=NA_character_,
                            state="living",
                            in_treatment_program="no",
                            random_seed_state=NA,
                            ...){
            if(is.na(base_seed)){
                base_seed=125
            }
            if (is.na(random_seed_state)) {
                set.seed(base_seed+study_id)
                random_seed<-.Random.seed
            } else {
                random_seed<-random_seed_state
                .Random.seed<-random_seed
            }

            if (is.na(sex) |
                !(sex=="F" | sex=="M")) {
                s<-sample(c("F","M"),1,prob=c(0.5,0.5))
            } else {
                s<-sex
            }
            random_seed<-.Random.seed
            initFields(age=age,
                sex=s,
                state=state,
                in_treatment_program=in_treatment_program,
                study_id=study_id,
                random_seed_state=random_seed)

        },

        modelDeathFromOtherCauses = function () {
            if(sex=="F"){
                state<<-sample(
                            c("deceased","living"),1,
                            prob =c( death_rate_female[age], 1-death_rate_female[age]))
            }
            if(sex=="M"){
                state<<-sample(
                            c("deceased","living"),1,
                            prob =c( death_rate_male[age], 1-death_rate_male[age]))
            }
        },
        summary = function(){
            cat("age is",age,"\n")

        },

        show = function(){
            cat("Spin Person object of class",
                classLabel(class(.self)), "\n")
            cat("Age:")
            methods::show(age)
            cat("Sex:")
            methods::show(sex)
            cat("State:")
            methods::show(state)
            cat("In treatment program:")
            methods::show(in_treatment_program)
            cat("Study id:")
            methods::show(study_id)
        }

        )
)

Person$help(initialize)

alex<-Person$new(study_id =1 , base_seed = 122, age = 1, sex = "F", state ="living" , in_treatment_program ="no")

alex #this is a call to the function alex$show
#Spin Person object of class "Person" 
#Age:[1] 1
#Sex:[1] "F"
#State:[1] "living"
#In treatment program:[1] "no"
#Study id:[1] 1

alex$summary()
utils::str(alex) 

data(death_rates,package="RCSpin")


for ( i in 1:100){
    alex$age<-i
    alex$modelDeathFromOtherCauses()
    if(alex$state=="deceased"){break}
}
alex

Colon <- setRefClass( "Colon",
        fields = list(
            state="character",
            cancer_site="character",
            sites="list"
            ),
    methods = list(
        initialize = function () {
            initFields(
                state="clear",
                cancer_site="",
                sites=list())
        },
        show = function(){
            cat("Spin Colon object of class",
                classLabel(class(.self)), "\n")
        }
    )
)

# Person with colon class
#########################

# Reference Class
PersonWithColon <- setRefClass( "PersonWithColon",
            contains="Person",
    fields = list(
        colon_clinical="character", #"clear", "CRC"
        colon="Colon"
         ),
    methods = list(
        initialize = function(colon=NULL,
                        ...){
            ##############################################################
            # call parent class Person$new() to initialise generic Person
            # values
            callSuper(...)

            # if a colon object was passed in, check if it that IS or was
            # derived from class Colon, then set .self$colon=colon
            if(!is.null(colon)
               && (class(colon)=="Colon"
                   || is.element("Colon", colon$getClass()@refSuperClasses))){
                .self$colon <- colon

            # Otherwise set .self$colon to new Colon object
            } else {
                .self$colon <- Colon$new()
            }
            .self$colon_clinical <<- "clear"
        },

        showingCRCSymptoms = function () {
            return(colon_clinical=="symptomatic CRC")
        },

        updateState = function () {
            # update our colon's state
            colon$updateState()
        },


        show = function(){
            callSuper()
            cat("Colon clinical characteristic:")
            methods::show(colon_clinical)
            cat("Colon:\n")
            colon$show()
        }
    )
)


MyClass <- setRefClass(
  "MyClass",
  fields = list(
    xy = "data.frame"
  ),
  methods = list(
    initialize = function( df ){
      if( !missing( df ) ){
        xy <<- df
      }
    },
    getSecondRow = function(){
      # A mistake happend here
      return( xy[1,] )
    }
  )
)

mc <- MyClass$new( data.frame( a = 1:10, b = rnorm(10) ) )
mc$getSecondRow()

## The trick instead of loading the class and reproducing the object from scratch is 
## to construct an new object from the existing, using the copy constructor 
## functionality of the default initialize( ... ) constructor. After debugging and
## reloading the class you can just copy the existing object with the implementation 
## into the same variable by

# NOTRUN
mc <- MyClass$new( mc )

initialize = function( df, ... ){
    callSuper( ... )
    if( !missing( df ) ){
        xy <<- df
    }
}


mc <- MyClass$new( mc$xy, mc )


@ 


\begin{multicols}{2}
\begin{itemize}
\item GenericModel 
\item CrcSpinModel 
\item DukesCrcSpinModel 
 \item Person 
\item PersonWithColon 
\item DukesPersonWithColon 
\item Colon 
\item DukesColon 
\item Adenoma 
\item AdenomaParams 
  \item DukesAdenoma 
\item DukesAdenomaParams 
  \item Risk 
\item CrcRisk 
  \item CrcRiskParams 
\item Test 
\item ClinicalHistory 
\item SymptomaticPresentation 
\end{itemize}
\end{multicols}

A \texttt{Model} contains a study group of \texttt{Person}s. In the case of  
\texttt{DukesCrcSpinModel} these are \texttt{DukesPersonWithColon}s 
and they have \texttt{DukesColon}s, with \texttt{DukesAdenoma} which can transition through
the Dukes cancer stages.

 
<<echo=FALSE, eval=FALSE>>=
library(devtools) 

install_github("EconometricsBySimulation/Ninja/blob/master/2014/11/circ.graph.R")
library(RCurl)
1
2
3
4
5
6
7
8
9
10
11
12
	
source_github <- function(u) {
  # load package
  require(RCurl)
 
  # read script lines from website
  script <- getURL(u, ssl.verifypeer = FALSE)
 
  # parase lines and evealuate in the global environement
  eval(parse(text = script))
}

source_https <- function(u, unlink.tmp.certs = FALSE) {
  # load package
  require(RCurl)
 
  # read script lines from website using a security certificate
  if(!file.exists("cacert.pem")) download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile = "cacert.pem")
  script <- getURL(u, followlocation = TRUE, cainfo = "cacert.pem")
  if(unlink.tmp.certs) unlink("cacert.pem")
 
  # parase lines and evealuate in the global environement
  eval(parse(text = script), envir= .GlobalEnv)
}
source_https("https://raw.github.com/EconometricsBySimulation/Ninja/blob/master/2014/11/circ.graph.R")

script <- getURL(u, ssl.verifypeer = FALSE)
eval(parse(text = script))

install_github("csiro-crc-spin/RCSpin")
library(RCSpin)





isS4(GenericModel) #TRUE
GenericModel$methods()
# [1] "callSuper"        "copy"             "doIteration"      "export"          
# [5] "field"            "getClass"         "getRefClass"      "import"          
# [9] "initFields"       "initialize"       "run"              "show"            
#[13] "show#envRefClass" "trace"            "untrace"          "updateSubject"   
#[17] "usingMethods" 

GenericModel$help(doIteration)

GenericModel$help(initialize)

GenericModel$fields()
#          iterations iteration_resolution          study_group 
#           "numeric"            "numeric"               "list" 
#       study_results 
#            "matrix" 



@ 


\FloatBarrier
\section{crcSpin}

<<echo=FALSE, eval=FALSE>>=
isS4(CrcSpinModel)
#[1] TRUE
showClass("CrcSpinModel")
#Class "CrcSpinModel" [package "RCSpin"]
#
#Slots:
#                  
#Name:       .xData
#Class: environment
#
#Extends: 
#Class "GenericModel", directly
#Class "envRefClass", by class "GenericModel", distance 2
#Class ".environment", by class "GenericModel", distance 3
#Class "refClass", by class "GenericModel", distance 3
#Class "environment", by class "GenericModel", distance 4, with explicit coerce
#Class "refObject", by class "GenericModel", distance 4
#
#Known Subclasses: "DukesCrcSpinModel"
getAnywhere(CrcSpinModel)
cc<-CrcSpinModel$new(iterations=99, num_subjects=10,seed=123)
cc$run()
cc$study_group[1]

cc$study_group[[1]]$colon
#Spin Colon object of class "Colon"

cc$study_group[[1]]$colon$sites[[1]]$initiated_in_year
#[[1]]
#Spin Person object of class "PersonWithColon" 
#Age:[1] 88
#Sex:[1] "F"
#State:[1] "deceased"
#In treatment program:[1] "no"
#Study id:[1] 1
#Clinical history:
#Spin ClinicalHistory object of class "ClinicalHistory" 
#Status:character(0)
#Events:list()
#Risk level:[1] "standard"
#Colon clinical characteristic:[1] "clear"
#Colon:
#Spin Colon object of class "Colon" 


CrcSpinModel$methods()
##  [1] "adenomaParamsType"               "callSuper"                      
##  [3] "copy"                            "crcRiskParamsType"              
##  [5] "doIteration"                     "export"                         
##  [7] "field"                           "getClass"                       
##  [9] "getModelResultSize"              "getModelResultSize#GenericModel"
## [11] "getRefClass"                     "import"                         
## [13] "initFields"                      "initialize"                     
## [15] "initialize#GenericModel"         "modelSubjectDiseaseDevelopment" 
## [17] "personWithColonType"             "propegate_model_parameters"     
## [19] "run"                             "set_adenoma_modeling_parameters"
## [21] "set_crcrisk_modeling_parameters" "show"                           
## [23] "show#envRefClass"                "subjectHasNotLeftStudy"         
## [25] "testForAndTreatCRC"              "trace"                          
## [27] "untrace"                         "updateSubject"                  
## [29] "updateSubject#GenericModel"      "usingMethods"


CrcSpinModel$fields()
#         iterations iteration_resolution          study_group 
#           "numeric"            "numeric"               "list" 
#       study_results     commencement_age crcrisk_model_params 
#            "matrix"            "numeric"      "CrcRiskParams" 
#adenoma_model_params 
#     "AdenomaParams" 


cc<-GenericModel$new(iterations=99, num_subjects=5)
cc$trace(run,browser)
cc$run()

cc$untrace(run,browser)
cc$trace(doIteration,browser)
cc$run()
cc$untrace(doIteration,browser)
cc$trace(updateSubject,browser)
cc$run()


## debug(mean.default)
## mean(1:10)
## debugging in: mean.default(1:10)
## debug: {
##     if (na.rm)
##         x <- x[!is.na(x)]
##     trim <- trim[1]
##     n <- length(c(x, recursive = TRUE))
##     if (trim > 0) {
##         if (trim >= 0.5)
##             return(median(x, na.rm = FALSE))
##         lo <- floor(n * trim) + 1
##         hi <- n + 1 - lo
##         x <- sort(x, partial = unique(c(lo, hi)))[lo:hi]
##         n <- hi - lo + 1
##     }
##     sum(x)/n
## }
## where
## g: if (na.rm) x <- x[!is.na(x)]
## Browse[1]>
## debug: trim <- trim[1]
## Browse[1]> trim
## [1] 0
## Browse[1]>
## debug: n <- length(c(x, recursive = TRUE))
## Browse[1]> c
## exiting from: mean.default(1:10)



@ 


\FloatBarrier
\section{DukesCrcSpinModel}


<<echo=FALSE, eval=FALSE>>=

isS4(DukesCrcSpinModel)
#[1] TRUE
showClass("DukesCrcSpinModel")

getAnywhere(DukesCrcSpinModel)
cc<-DukesCrcSpinModel$new(iterations=99, num_subjects=10,seed=123)
cc$run()
cc$study_group[1]

cc$study_group[[1]]$colon
#Spin Colon object of class "DukesColon" 

cc$study_group[[1]]$colon$sites[[1]]$initiated_in_year
#[1] 58

DukesCrcSpinModel$methods()
DukesCrcSpinModel$fields()

alex<-Person$new()

xx$trace(edit, browser)
## "Test",
## fields = list(
##         age="numeric",
##         type="character",
##         compliance="character",
##         result="character",
##         state="character"
##     )
##  methods =   summary ,       show 

## "ClinicalHistory"
##     fields = list(
##         status="character",
##         events="list"
##         ),
## methods = summary ,show

## "Person",
##     fields = list(
##         age="numeric",
##         sex="character",
##         state="character", #"deceased","living", etc (as needed by subclasses)
##         in_treatment_program="character",
##         clinical_history="ClinicalHistory",
##         study_id="numeric",
##         random_seed_state="integer"
##     )
## methods = initialize 
##         saveRNGState 
##         restoreRNGState
##         modelDeathFromOtherCauses
##         summary 
##         show 




## "RiskParameters",
##             fields = list(
##                 baseline_risk="numeric",
##                 sex_linked_risk="numeric",
##                 age_risk="numeric"
##                 )

## "SymptomaticPresentation",
##             fields = list(
##                 age="numeric",
##                 cancer.stage="character"
##                 )




##                               updateSubject = function (subject) {
##                                     if (subject$state=="living") {
##                                         subject$restoreRNGState()
##                                         subject$age = subject$age + iteration_resolution
##                                         subject$modelDeathFromOtherCauses()
##                                         subject$saveRNGState()
##                                     }
##                                     return((subject$state=="living"))
##                                 }

###############

alex<-PersonWithColon$new()
alex$age #1
alex$clinical_history
alex$in_treatment_program
alex$state
alex$colon_clinical
iFOBT.screening(alex)



alex$clinical_history$events<- lappend(alex$clinical_history$events,
                                             Test$new(
                                                 age=alex$age,
                                                 type="iFOBT",
                                                 compliance="accept",
                                                 result="positive",
                                                 state= "adenoma")
                                             )

#I have put iFOBT.screening() function into the CRCSpinModel class. Apparently I
#could have put it in the Person class

source("crcSpin.R")
model<-CrcSpinModel$new(iterations=99, num_subjects=5)
alex<-PersonWithColon$new()
model$iFOBTscreening(alex)
alex

model$NBCSP(alex)

#Alternatively, you could just use one of the people already in the model's study_group.


model$iFOBTscreening(model$study_group[[1]])
model$study_group[[1]]
#Spin Person object of class "PersonWithColon" 
#Age:[1] 20
#Sex:[1] "F"
#State:[1] "living"
#In treatment program:[1] "no"
#Study id:[1] 1
#Clinical history:
#Spin ClinicalHistory object of class "ClinicalHistory" 
#Status:character(0)
#Events:[[1]]
#Spin Test object of class "Test" 
#Age:[1] 20
#Type of test:[1] "iFOBT"
#Compliance:[1] "accept"
#Result:[1] "negative"
#State:[1] "TN"
#
#Risk level:[1] "standard"
#Colon clinical characteristic:[1] "clear"
#Colon:
#Spin Colon object of class "Colon"




#############################
source("dukesCrcSpin.R")

 
alex<-DukesPersonWithColon$new()
alex$age #1
alex$clinical_history
alex$in_treatment_program
alex$state
alex$colon_clinical
iFOBTscreening(alex) #Error: could not find function "iFOBTscreening"



model<-DukesCrcSpinModel$new(iterations=99, num_subjects=5)
model$iFOBTscreening(alex)
alex
model$NBCSP(alex)  #0 0 0 0 0 0 0 0 0 0 0 0 0 0
alex


cc$study_group[[1]]$colon
#Spin Colon object of class "Colon"

cc$study_group[[10]]$colon$sites[[1]]$initiated_in_year

#cc<-CrcSpinModel$new(iterations=99, num_subjects=50000)
#cc$run()
#save(cc,file="script8_cc.Rdata")
res2<-cc$study_results



y<-res.M[,40:44]  #person1@colon@stage  includes CRC and pre-symptomatic     
x<-c(1:99)
z<-c(1,2,3,4,5) #z <- val2col(apply(y,2,max), col=COLS)
#ylim=c(0, 1.2*max(apply(y,1,sum), na.rm=TRUE))

png("t7.png")
par(mfrow=c(3,1))
plot.stacked(x,y, xlim=c(0, 100), ylim=c(0, 500),
              yaxs="i", col=z, border="white", lwd=0.5,order.method="as.is")
title(main="all CRC, population of 25000 males")


y<-res.M[,54:57]     #   found from test or symptoms      
z<-c(1,2,3,4) 
plot.stacked(x,y, xlim=c(0, 100),  ylim=c(0, 500),
              yaxs="i", col=z, border="white", lwd=0.5,order.method="as.is")
title(main="entering treatment -- detected by NBCSP")



y<-res.M[,12:16]     #                        if (object@colon@state=="pre symptomatic CRC"){
z<-c(1,2,3,4,5)
plot.stacked(x,y, xlim=c(0, 100), ylim=c(0, 500),
              yaxs="i", col=z, border="white", lwd=0.5,order.method="as.is")
title(main="undetected  CRC")
dev.off()
abline(v=c(55,60,65,70,75))


cc<-DukesCrcSpinModel$new(iterations=99, num_subjects=5)
cc$trace(NBCSP,browser)
cc$run()
#cc$untrace(run,browser)

@ 

<<echo=FALSE,eval=FALSE>>=
## a simple editor for matrix objects.  Method  $edit() changes some
## range of values; method $undo() undoes the last edit.
mEdit <- setRefClass("mEdit",
      fields = list( data = "matrix",
        edits = "list"),
      methods = list(
     edit = function(i, j, value) {
       ## the following string documents the edit method
       'Replaces the range [i, j] of the
        object by value.
        '
         backup <-
             list(i, j, data[i,j])
         data[i,j] <<- value
         edits <<- c(edits, list(backup))
         invisible(value)
     },
     undo = function() {
       'Undoes the last edit() operation
        and update the edits field accordingly.
        '
         prev <- edits
         if(length(prev)) prev <- prev[[length(prev)]]
         else stop("No more edits to undo")
         edit(prev[[1]], prev[[2]], prev[[3]])
         ## trim the edits list
         length(edits) <<- length(edits) - 2
         invisible(prev)
     },
     show = function() {
       'Method for automatically printing matrix editors'
       cat("Reference matrix editor object of class",
          classLabel(class(.self)), "\n")
       cat("Data: \n")
       methods::show(data)
       cat("Undo list is of length", length(edits), "\n")
     }
     ))
 
xMat <- matrix(1:12,4,3)
xx <- mEdit(data = xMat)
xx$edit(2, 2, 0)
xx$edit(3, 3, 0)
xx

xx$undo()

mEdit$help("undo")
stopifnot(all.equal(xx$data, xMat))
 
utils::str(xx) # show fields and names of non-trivial methods
 
## add a method to save the object
mEdit$methods(
     save = function(file) {
       'Save the current object on the file
        in R external object format.
       '
         base::save(.self, file = file)
     }
)
 
tf <- tempfile()
xx$save(tf)
 
 
 
## Not run:
## Inheriting a reference class:  a matrix viewer
mv <- setRefClass("matrixViewer",
    fields = c("viewerDevice", "viewerFile"),
    contains = "mEdit",
    methods = list( view = function() {
        dd <- dev.cur(); dev.set(viewerDevice)
        devAskNewPage(FALSE)
        matplot(data, main = paste("After",length(edits),"edits"))
        dev.set(dd)},
        edit = # invoke previous method, then replot
          function(i, j, value) {
            callSuper(i, j, value)
            view()
          }))
 
## initialize and finalize methods
mv$methods( initialize =
  function(file = "./matrixView.pdf", ...) {
    viewerFile <<- file
    pdf(viewerFile)
    viewerDevice <<- dev.cur()
    dev.set(dev.prev())
    callSuper(...)
  },
  finalize = function() {
    dev.off(viewerDevice)
  })
 
## debugging an object: call browser() in method $edit()
xx$trace(edit, browser)
 
## debugging all objects from class mEdit in method $undo()
mEdit$trace(undo, browser)
## End(Not run)



@ 


\end{document}
